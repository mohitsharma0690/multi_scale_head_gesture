# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyHCRF', [dirname(__file__)])
        except ImportError:
            import _PyHCRF
            return _PyHCRF
        if fp is not None:
            try:
                _mod = imp.load_module('_PyHCRF', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PyHCRF = swig_import_helper()
    del swig_import_helper
else:
    import _PyHCRF
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyHCRF.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _PyHCRF.SwigPyIterator_value(self)
    def incr(self, n=1): return _PyHCRF.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _PyHCRF.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _PyHCRF.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _PyHCRF.SwigPyIterator_equal(self, *args)
    def copy(self): return _PyHCRF.SwigPyIterator_copy(self)
    def next(self): return _PyHCRF.SwigPyIterator_next(self)
    def __next__(self): return _PyHCRF.SwigPyIterator___next__(self)
    def previous(self): return _PyHCRF.SwigPyIterator_previous(self)
    def advance(self, *args): return _PyHCRF.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _PyHCRF.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _PyHCRF.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _PyHCRF.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _PyHCRF.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _PyHCRF.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _PyHCRF.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _PyHCRF.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DataSequenceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSequenceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSequenceVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _PyHCRF.DataSequenceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PyHCRF.DataSequenceVector___nonzero__(self)
    def __bool__(self): return _PyHCRF.DataSequenceVector___bool__(self)
    def __len__(self): return _PyHCRF.DataSequenceVector___len__(self)
    def pop(self): return _PyHCRF.DataSequenceVector_pop(self)
    def __getslice__(self, *args): return _PyHCRF.DataSequenceVector___getslice__(self, *args)
    def __setslice__(self, *args): return _PyHCRF.DataSequenceVector___setslice__(self, *args)
    def __delslice__(self, *args): return _PyHCRF.DataSequenceVector___delslice__(self, *args)
    def __delitem__(self, *args): return _PyHCRF.DataSequenceVector___delitem__(self, *args)
    def __getitem__(self, *args): return _PyHCRF.DataSequenceVector___getitem__(self, *args)
    def __setitem__(self, *args): return _PyHCRF.DataSequenceVector___setitem__(self, *args)
    def append(self, *args): return _PyHCRF.DataSequenceVector_append(self, *args)
    def empty(self): return _PyHCRF.DataSequenceVector_empty(self)
    def size(self): return _PyHCRF.DataSequenceVector_size(self)
    def clear(self): return _PyHCRF.DataSequenceVector_clear(self)
    def swap(self, *args): return _PyHCRF.DataSequenceVector_swap(self, *args)
    def get_allocator(self): return _PyHCRF.DataSequenceVector_get_allocator(self)
    def begin(self): return _PyHCRF.DataSequenceVector_begin(self)
    def end(self): return _PyHCRF.DataSequenceVector_end(self)
    def rbegin(self): return _PyHCRF.DataSequenceVector_rbegin(self)
    def rend(self): return _PyHCRF.DataSequenceVector_rend(self)
    def pop_back(self): return _PyHCRF.DataSequenceVector_pop_back(self)
    def erase(self, *args): return _PyHCRF.DataSequenceVector_erase(self, *args)
    def __init__(self, *args): 
        this = _PyHCRF.new_DataSequenceVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PyHCRF.DataSequenceVector_push_back(self, *args)
    def front(self): return _PyHCRF.DataSequenceVector_front(self)
    def back(self): return _PyHCRF.DataSequenceVector_back(self)
    def assign(self, *args): return _PyHCRF.DataSequenceVector_assign(self, *args)
    def resize(self, *args): return _PyHCRF.DataSequenceVector_resize(self, *args)
    def insert(self, *args): return _PyHCRF.DataSequenceVector_insert(self, *args)
    def reserve(self, *args): return _PyHCRF.DataSequenceVector_reserve(self, *args)
    def capacity(self): return _PyHCRF.DataSequenceVector_capacity(self)
    __swig_destroy__ = _PyHCRF.delete_DataSequenceVector
    __del__ = lambda self : None;
DataSequenceVector_swigregister = _PyHCRF.DataSequenceVector_swigregister
DataSequenceVector_swigregister(DataSequenceVector)

INIT_ZERO = _PyHCRF.INIT_ZERO
INIT_CONSTANT = _PyHCRF.INIT_CONSTANT
INIT_RANDOM = _PyHCRF.INIT_RANDOM
INIT_MEAN = _PyHCRF.INIT_MEAN
INIT_RANDOM_MEAN_STDDEV = _PyHCRF.INIT_RANDOM_MEAN_STDDEV
INIT_GAUSSIAN = _PyHCRF.INIT_GAUSSIAN
INIT_RANDOM_GAUSSIAN = _PyHCRF.INIT_RANDOM_GAUSSIAN
INIT_RANDOM_GAUSSIAN2 = _PyHCRF.INIT_RANDOM_GAUSSIAN2
INIT_PREDEFINED = _PyHCRF.INIT_PREDEFINED
INIT_PERCEPTRON = _PyHCRF.INIT_PERCEPTRON
OPTIMIZER_CG = _PyHCRF.OPTIMIZER_CG
OPTIMIZER_BFGS = _PyHCRF.OPTIMIZER_BFGS
OPTIMIZER_ASA = _PyHCRF.OPTIMIZER_ASA
OPTIMIZER_OWLQN = _PyHCRF.OPTIMIZER_OWLQN
OPTIMIZER_LBFGS = _PyHCRF.OPTIMIZER_LBFGS
OPTIMIZER_HMMPERCEPTRON = _PyHCRF.OPTIMIZER_HMMPERCEPTRON
class Toolbox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Toolbox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Toolbox, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyHCRF.delete_Toolbox
    __del__ = lambda self : None;
    def train(self, *args): return _PyHCRF.Toolbox_train(self, *args)
    def test(self, *args): return _PyHCRF.Toolbox_test(self, *args)
    def validate(self, *args): return _PyHCRF.Toolbox_validate(self, *args)
    def load(self, *args): return _PyHCRF.Toolbox_load(self, *args)
    def save(self, *args): return _PyHCRF.Toolbox_save(self, *args)
    def computeError(self, *args): return _PyHCRF.Toolbox_computeError(self, *args)
    def getRegularizationL1(self): return _PyHCRF.Toolbox_getRegularizationL1(self)
    def getRegularizationL2(self): return _PyHCRF.Toolbox_getRegularizationL2(self)
    def setRegularizationL1(self, *args): return _PyHCRF.Toolbox_setRegularizationL1(self, *args)
    def setRegularizationL2(self, *args): return _PyHCRF.Toolbox_setRegularizationL2(self, *args)
    def getMaxNbIteration(self): return _PyHCRF.Toolbox_getMaxNbIteration(self)
    def getWeightInitType(self): return _PyHCRF.Toolbox_getWeightInitType(self)
    def setMaxNbIteration(self, *args): return _PyHCRF.Toolbox_setMaxNbIteration(self, *args)
    def setWeightInitType(self, *args): return _PyHCRF.Toolbox_setWeightInitType(self, *args)
    def setRandomSeed(self, *args): return _PyHCRF.Toolbox_setRandomSeed(self, *args)
    def getRandomSeed(self): return _PyHCRF.Toolbox_getRandomSeed(self)
    def setInitWeights(self, *args): return _PyHCRF.Toolbox_setInitWeights(self, *args)
    def getInitWeights(self): return _PyHCRF.Toolbox_getInitWeights(self)
    def setWeights(self, *args): return _PyHCRF.Toolbox_setWeights(self, *args)
    def getDebugLevel(self): return _PyHCRF.Toolbox_getDebugLevel(self)
    def setDebugLevel(self, *args): return _PyHCRF.Toolbox_setDebugLevel(self, *args)
    def getAllFeatures(self, *args): return _PyHCRF.Toolbox_getAllFeatures(self, *args)
    def getModel(self): return _PyHCRF.Toolbox_getModel(self)
    def getFeatureGenerator(self): return _PyHCRF.Toolbox_getFeatureGenerator(self)
    def getOptimizer(self): return _PyHCRF.Toolbox_getOptimizer(self)
    def setRangeWeights(self, *args): return _PyHCRF.Toolbox_setRangeWeights(self, *args)
    def setMinRangeWeights(self, *args): return _PyHCRF.Toolbox_setMinRangeWeights(self, *args)
    def setMaxRangeWeights(self, *args): return _PyHCRF.Toolbox_setMaxRangeWeights(self, *args)
    def getMinRangeWeights(self): return _PyHCRF.Toolbox_getMinRangeWeights(self)
    def getMaxRangeWeights(self): return _PyHCRF.Toolbox_getMaxRangeWeights(self)
    def initWeights(self, *args): return _PyHCRF.Toolbox_initWeights(self, *args)
    def set_num_threads(self, *args): return _PyHCRF.Toolbox_set_num_threads(self, *args)
    def getResults(self, *args): return _PyHCRF.Toolbox_getResults(self, *args)
Toolbox_swigregister = _PyHCRF.Toolbox_swigregister
Toolbox_swigregister(Toolbox)

class ToolboxCRF(Toolbox):
    __swig_setmethods__ = {}
    for _s in [Toolbox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolboxCRF, name, value)
    __swig_getmethods__ = {}
    for _s in [Toolbox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToolboxCRF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyHCRF.new_ToolboxCRF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyHCRF.delete_ToolboxCRF
    __del__ = lambda self : None;
    def test(self, *args): return _PyHCRF.ToolboxCRF_test(self, *args)
    def getModel(self, *args):
        """
        This function need to know the dataset on which the model was trained.
        This function return two numpy arrays.
        The first array is the weights between label and features. Arr1[label_num][features_num] where all index are zero based.
        The second array contains the weight between the labels. Arr2[current_label][next_label]
        """
        return _PyHCRF.ToolboxCRF_getModel(self, *args)

ToolboxCRF_swigregister = _PyHCRF.ToolboxCRF_swigregister
ToolboxCRF_swigregister(ToolboxCRF)

class ToolboxCRFRealtime(ToolboxCRF):
    __swig_setmethods__ = {}
    for _s in [ToolboxCRF]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolboxCRFRealtime, name, value)
    __swig_getmethods__ = {}
    for _s in [ToolboxCRF]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToolboxCRFRealtime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyHCRF.new_ToolboxCRFRealtime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyHCRF.delete_ToolboxCRFRealtime
    __del__ = lambda self : None;
    def openPort(self, *args): return _PyHCRF.ToolboxCRFRealtime_openPort(self, *args)
    def closePort(self, *args): return _PyHCRF.ToolboxCRFRealtime_closePort(self, *args)
    def insertOneFrame(self, *args): return _PyHCRF.ToolboxCRFRealtime_insertOneFrame(self, *args)
ToolboxCRFRealtime_swigregister = _PyHCRF.ToolboxCRFRealtime_swigregister
ToolboxCRFRealtime_swigregister(ToolboxCRFRealtime)

class ToolboxHCRF(Toolbox):
    __swig_setmethods__ = {}
    for _s in [Toolbox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolboxHCRF, name, value)
    __swig_getmethods__ = {}
    for _s in [Toolbox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToolboxHCRF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyHCRF.new_ToolboxHCRF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyHCRF.delete_ToolboxHCRF
    __del__ = lambda self : None;
    def test(self, *args): return _PyHCRF.ToolboxHCRF_test(self, *args)
ToolboxHCRF_swigregister = _PyHCRF.ToolboxHCRF_swigregister
ToolboxHCRF_swigregister(ToolboxHCRF)

class ToolboxLDCRF(Toolbox):
    __swig_setmethods__ = {}
    for _s in [Toolbox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolboxLDCRF, name, value)
    __swig_getmethods__ = {}
    for _s in [Toolbox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToolboxLDCRF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyHCRF.new_ToolboxLDCRF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyHCRF.delete_ToolboxLDCRF
    __del__ = lambda self : None;
    def test(self, *args): return _PyHCRF.ToolboxLDCRF_test(self, *args)
ToolboxLDCRF_swigregister = _PyHCRF.ToolboxLDCRF_swigregister
ToolboxLDCRF_swigregister(ToolboxLDCRF)

class ToolboxGHCRF(ToolboxHCRF):
    __swig_setmethods__ = {}
    for _s in [ToolboxHCRF]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolboxGHCRF, name, value)
    __swig_getmethods__ = {}
    for _s in [ToolboxHCRF]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToolboxGHCRF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyHCRF.new_ToolboxGHCRF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyHCRF.delete_ToolboxGHCRF
    __del__ = lambda self : None;
ToolboxGHCRF_swigregister = _PyHCRF.ToolboxGHCRF_swigregister
ToolboxGHCRF_swigregister(ToolboxGHCRF)

class ToolboxSharedLDCRF(ToolboxLDCRF):
    __swig_setmethods__ = {}
    for _s in [ToolboxLDCRF]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolboxSharedLDCRF, name, value)
    __swig_getmethods__ = {}
    for _s in [ToolboxLDCRF]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToolboxSharedLDCRF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyHCRF.new_ToolboxSharedLDCRF(*args)
        try: self.this.append(this)
        except: self.this = this
    def test(self, *args): return _PyHCRF.ToolboxSharedLDCRF_test(self, *args)
    __swig_destroy__ = _PyHCRF.delete_ToolboxSharedLDCRF
    __del__ = lambda self : None;
ToolboxSharedLDCRF_swigregister = _PyHCRF.ToolboxSharedLDCRF_swigregister
ToolboxSharedLDCRF_swigregister(ToolboxSharedLDCRF)

class ToolboxHMMPerceptron(Toolbox):
    __swig_setmethods__ = {}
    for _s in [Toolbox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolboxHMMPerceptron, name, value)
    __swig_getmethods__ = {}
    for _s in [Toolbox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToolboxHMMPerceptron, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyHCRF.new_ToolboxHMMPerceptron(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyHCRF.delete_ToolboxHMMPerceptron
    __del__ = lambda self : None;
    def train(self, *args): return _PyHCRF.ToolboxHMMPerceptron_train(self, *args)
    def test(self, *args): return _PyHCRF.ToolboxHMMPerceptron_test(self, *args)
ToolboxHMMPerceptron_swigregister = _PyHCRF.ToolboxHMMPerceptron_swigregister
ToolboxHMMPerceptron_swigregister(ToolboxHMMPerceptron)

class ToolboxLVPERCEPTRON(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolboxLVPERCEPTRON, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ToolboxLVPERCEPTRON, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyHCRF.new_ToolboxLVPERCEPTRON(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyHCRF.delete_ToolboxLVPERCEPTRON
    __del__ = lambda self : None;
    def test(self, *args): return _PyHCRF.ToolboxLVPERCEPTRON_test(self, *args)
ToolboxLVPERCEPTRON_swigregister = _PyHCRF.ToolboxLVPERCEPTRON_swigregister
ToolboxLVPERCEPTRON_swigregister(ToolboxLVPERCEPTRON)

class DataSequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSequence, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PyHCRF.delete_DataSequence
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _PyHCRF.new_DataSequence(*args)
        try: self.this.append(this)
        except: self.this = this
    def load(self, *args): return _PyHCRF.DataSequence_load(self, *args)
    def equal(self, *args): return _PyHCRF.DataSequence_equal(self, *args)
    def length(self): return _PyHCRF.DataSequence_length(self)
    def setStateLabels(self, *args): return _PyHCRF.DataSequence_setStateLabels(self, *args)
    def getStateLabels(self, *args): return _PyHCRF.DataSequence_getStateLabels(self, *args)
    def setAdjacencyMatrix(self, *args): return _PyHCRF.DataSequence_setAdjacencyMatrix(self, *args)
    def getAdjacencyMatrix(self, *args): return _PyHCRF.DataSequence_getAdjacencyMatrix(self, *args)
    def setPrecomputedFeatures(self, *args): return _PyHCRF.DataSequence_setPrecomputedFeatures(self, *args)
    def getPrecomputedFeatures(self): return _PyHCRF.DataSequence_getPrecomputedFeatures(self)
    def setPrecomputedFeaturesSparse(self, *args): return _PyHCRF.DataSequence_setPrecomputedFeaturesSparse(self, *args)
    def getPrecomputedFeaturesSparse(self): return _PyHCRF.DataSequence_getPrecomputedFeaturesSparse(self)
    def setStatesPerNode(self, *args): return _PyHCRF.DataSequence_setStatesPerNode(self, *args)
    def getStatesPerNode(self): return _PyHCRF.DataSequence_getStatesPerNode(self)
    def setSequenceLabel(self, *args): return _PyHCRF.DataSequence_setSequenceLabel(self, *args)
    def getSequenceLabel(self): return _PyHCRF.DataSequence_getSequenceLabel(self)
    def setEstimatedStateLabels(self, *args): return _PyHCRF.DataSequence_setEstimatedStateLabels(self, *args)
    def getEstimatedStateLabels(self): return _PyHCRF.DataSequence_getEstimatedStateLabels(self)
    def setEstimatedSequenceLabel(self, *args): return _PyHCRF.DataSequence_setEstimatedSequenceLabel(self, *args)
    def getEstimatedSequenceLabel(self): return _PyHCRF.DataSequence_getEstimatedSequenceLabel(self)
    def setEstimatedProbabilitiesPerStates(self, *args): return _PyHCRF.DataSequence_setEstimatedProbabilitiesPerStates(self, *args)
    def getEstimatedProbabilitiesPerStates(self): return _PyHCRF.DataSequence_getEstimatedProbabilitiesPerStates(self)
    def setWeightSequence(self, *args): return _PyHCRF.DataSequence_setWeightSequence(self, *args)
    def getWeightSequence(self): return _PyHCRF.DataSequence_getWeightSequence(self)
DataSequence_swigregister = _PyHCRF.DataSequence_swigregister
DataSequence_swigregister(DataSequence)

class DataSequenceRealtime(DataSequence):
    __swig_setmethods__ = {}
    for _s in [DataSequence]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSequenceRealtime, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSequence]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataSequenceRealtime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyHCRF.new_DataSequenceRealtime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyHCRF.delete_DataSequenceRealtime
    __del__ = lambda self : None;
    def init(self, *args): return _PyHCRF.DataSequenceRealtime_init(self, *args)
    def push_back(self, *args): return _PyHCRF.DataSequenceRealtime_push_back(self, *args)
    def getAlpha(self): return _PyHCRF.DataSequenceRealtime_getAlpha(self)
    def initializeAlpha(self, *args): return _PyHCRF.DataSequenceRealtime_initializeAlpha(self, *args)
    def getPosition(self): return _PyHCRF.DataSequenceRealtime_getPosition(self)
    def getWindowSize(self): return _PyHCRF.DataSequenceRealtime_getWindowSize(self)
    def isReady(self): return _PyHCRF.DataSequenceRealtime_isReady(self)
DataSequenceRealtime_swigregister = _PyHCRF.DataSequenceRealtime_swigregister
DataSequenceRealtime_swigregister(DataSequenceRealtime)

class DataSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSet, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PyHCRF.delete_DataSet
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _PyHCRF.new_DataSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def load(self, *args): return _PyHCRF.DataSet_load(self, *args)
    def clearSequence(self): return _PyHCRF.DataSet_clearSequence(self)
    def searchNumberOfStates(self): return _PyHCRF.DataSet_searchNumberOfStates(self)
    def searchNumberOfSequenceLabels(self): return _PyHCRF.DataSet_searchNumberOfSequenceLabels(self)
    def getNumberofRawFeatures(self): return _PyHCRF.DataSet_getNumberofRawFeatures(self)
    def insert(self, *args): return _PyHCRF.DataSet_insert(self, *args)
    def at(self, *args): return _PyHCRF.DataSet_at(self, *args)
    def size(self): return _PyHCRF.DataSet_size(self)
    def begin(self, *args): return _PyHCRF.DataSet_begin(self, *args)
    def end(self, *args): return _PyHCRF.DataSet_end(self, *args)
    def getLabels(self): return _PyHCRF.DataSet_getLabels(self)
DataSet_swigregister = _PyHCRF.DataSet_swigregister
DataSet_swigregister(DataSet)

MAX_NUMBER_OF_LEVELS = _PyHCRF.MAX_NUMBER_OF_LEVELS
allTypes = _PyHCRF.allTypes
edgeFeaturesOnly = _PyHCRF.edgeFeaturesOnly
nodeFeaturesOnly = _PyHCRF.nodeFeaturesOnly
CHAIN = _PyHCRF.CHAIN
DANGLING_CHAIN = _PyHCRF.DANGLING_CHAIN
ADJMAT_PREDEFINED = _PyHCRF.ADJMAT_PREDEFINED
ALLSTATES = _PyHCRF.ALLSTATES
STATES_BASED_ON_LABELS = _PyHCRF.STATES_BASED_ON_LABELS
STATEMAT_PREDEFINED = _PyHCRF.STATEMAT_PREDEFINED
STATEMAT_PROBABILISTIC = _PyHCRF.STATEMAT_PROBABILISTIC
class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    def __init__(self, numberOfStates=0, numberOfSeqLabels=0, numberOfStateLabels=0): 
        this = _PyHCRF.new_Model(numberOfStates, numberOfSeqLabels, numberOfStateLabels)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyHCRF.delete_Model
    __del__ = lambda self : None;
    def setAdjacencyMatType(self, *args): return _PyHCRF.Model_setAdjacencyMatType(self, *args)
    def getAdjacencyMatType(self): return _PyHCRF.Model_getAdjacencyMatType(self)
    def setStateMatType(self, *args): return _PyHCRF.Model_setStateMatType(self, *args)
    def getStateMatType(self): return _PyHCRF.Model_getStateMatType(self)
    def getAdjacencyMatrix(self, *args): return _PyHCRF.Model_getAdjacencyMatrix(self, *args)
    def getStateMatrix(self, *args): return _PyHCRF.Model_getStateMatrix(self, *args)
    def setWeights(self, *args): return _PyHCRF.Model_setWeights(self, *args)
    def getWeights(self, *args): return _PyHCRF.Model_getWeights(self, *args)
    def refreshWeights(self): return _PyHCRF.Model_refreshWeights(self)
    def getNumberOfStates(self): return _PyHCRF.Model_getNumberOfStates(self)
    def setNumberOfStates(self, *args): return _PyHCRF.Model_setNumberOfStates(self, *args)
    def getNumberOfStateLabels(self): return _PyHCRF.Model_getNumberOfStateLabels(self)
    def setNumberOfStateLabels(self, *args): return _PyHCRF.Model_setNumberOfStateLabels(self, *args)
    def getNumberOfSequenceLabels(self): return _PyHCRF.Model_getNumberOfSequenceLabels(self)
    def setNumberOfSequenceLabels(self, *args): return _PyHCRF.Model_setNumberOfSequenceLabels(self, *args)
    def getNumberOfRawFeaturesPerFrame(self): return _PyHCRF.Model_getNumberOfRawFeaturesPerFrame(self)
    def setNumberOfRawFeaturesPerFrame(self, *args): return _PyHCRF.Model_setNumberOfRawFeaturesPerFrame(self, *args)
    def setRegL1Sigma(self, *args): return _PyHCRF.Model_setRegL1Sigma(self, *args)
    def setRegL2Sigma(self, *args): return _PyHCRF.Model_setRegL2Sigma(self, *args)
    def getRegL1Sigma(self): return _PyHCRF.Model_getRegL1Sigma(self)
    def getRegL2Sigma(self): return _PyHCRF.Model_getRegL2Sigma(self)
    def getRegL1FeatureTypes(self): return _PyHCRF.Model_getRegL1FeatureTypes(self)
    def getRegL2FeatureTypes(self): return _PyHCRF.Model_getRegL2FeatureTypes(self)
    def setFeatureMask(self, *args): return _PyHCRF.Model_setFeatureMask(self, *args)
    def getFeatureMask(self): return _PyHCRF.Model_getFeatureMask(self)
    def getNumberOfFeaturesPerLabel(self): return _PyHCRF.Model_getNumberOfFeaturesPerLabel(self)
    def getStatesPerLabel(self): return _PyHCRF.Model_getStatesPerLabel(self)
    def getLabelPerState(self): return _PyHCRF.Model_getLabelPerState(self)
    def getDebugLevel(self): return _PyHCRF.Model_getDebugLevel(self)
    def setDebugLevel(self, *args): return _PyHCRF.Model_setDebugLevel(self, *args)
    def load(self, *args): return _PyHCRF.Model_load(self, *args)
    def save(self, *args): return _PyHCRF.Model_save(self, *args)
    def read(self, *args): return _PyHCRF.Model_read(self, *args)
    def write(self, *args): return _PyHCRF.Model_write(self, *args)
    def getInternalAdjencyMatrix(self): return _PyHCRF.Model_getInternalAdjencyMatrix(self)
    def getInternalStateMatrix(self): return _PyHCRF.Model_getInternalStateMatrix(self)
Model_swigregister = _PyHCRF.Model_swigregister
Model_swigregister(Model)

# This file is compatible with both classic and new-style classes.


